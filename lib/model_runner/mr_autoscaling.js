"use strict";
/*
 * Copyright 2023 Amazon.com, Inc. or its affiliates.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.MRAutoScaling = exports.MRAutoscalingConfig = void 0;
const cdk_enterprise_iac_1 = require("@cdklabs/cdk-enterprise-iac");
const aws_cdk_lib_1 = require("aws-cdk-lib");
const aws_cloudwatch_1 = require("aws-cdk-lib/aws-cloudwatch");
const cdk_nag_1 = require("cdk-nag");
const constructs_1 = require("constructs");
// mutable configuration dataclass for model runner
// for a more detailed breakdown of the configuration see: configuration_guide.md in the documentation directory.
class MRAutoscalingConfig {
    constructor(MR_AUTOSCALING_TASK_MAX_COUNT = 40, MR_AUTOSCALING_TASK_MIN_COUNT = 5, MR_AUTOSCALING_TASK_OUT_COOLDOWN = 3, MR_AUTOSCALING_TASK_IN_COOLDOWN = 1, MR_AUTOSCALING_TASK_IN_INCREMENT = 8, MR_AUTOSCALING_TASK_OUT_INCREMENT = 8) {
        this.MR_AUTOSCALING_TASK_MAX_COUNT = MR_AUTOSCALING_TASK_MAX_COUNT;
        this.MR_AUTOSCALING_TASK_MIN_COUNT = MR_AUTOSCALING_TASK_MIN_COUNT;
        this.MR_AUTOSCALING_TASK_OUT_COOLDOWN = MR_AUTOSCALING_TASK_OUT_COOLDOWN;
        this.MR_AUTOSCALING_TASK_IN_COOLDOWN = MR_AUTOSCALING_TASK_IN_COOLDOWN;
        this.MR_AUTOSCALING_TASK_IN_INCREMENT = MR_AUTOSCALING_TASK_IN_INCREMENT;
        this.MR_AUTOSCALING_TASK_OUT_INCREMENT = MR_AUTOSCALING_TASK_OUT_INCREMENT;
    }
}
exports.MRAutoscalingConfig = MRAutoscalingConfig;
class MRAutoScaling extends constructs_1.Construct {
    /**
     * Creates a custom autoscaling implementation for model runner.
     * @param scope the scope/stack in which to define this construct.
     * @param id the id of this construct within the current scope.
     * @param props the properties of this construct.
     * @returns the MRAutoScaling construct.
     */
    constructor(scope, id, props) {
        super(scope, id);
        // check and see if a custom autoscaling configuration was provided
        if (props.mrAutoscalingConfig) {
            this.mrAutoscalingConfig = props.mrAutoscalingConfig;
        }
        else {
            // if not set to default
            this.mrAutoscalingConfig = new MRAutoscalingConfig();
        }
        // Create custom autoscaling for ADC regions where it isn't available
        if (props.account.isAdc) {
            /**
             * CloudWatch Scheduled Job to control scaling
             * This is currently used to provide scaling capability for ECS
             * tasks in the highside partitions.
             */
            const regionQueueScalingAlarm = new aws_cloudwatch_1.Alarm(this, "RegionQueueScalingAlarm", {
                metric: props.regionRequestQueue.metricApproximateNumberOfMessagesVisible(),
                evaluationPeriods: 1,
                threshold: 3
            });
            cdk_nag_1.NagSuppressions.addResourceSuppressions(this, [
                {
                    id: "NIST.800.53.R5-CloudWatchAlarmAction",
                    reason: "Lambda function monitors these alarms on a cron basis " +
                        "rather than an event trigger to help scaling smoothness."
                }
            ], true);
            this.serviceAutoscaler = new cdk_enterprise_iac_1.EcsIsoServiceAutoscaler(this, "MRServiceScaler", {
                role: props.role,
                ecsCluster: props.cluster,
                ecsService: props.service,
                minimumTaskCount: this.mrAutoscalingConfig.MR_AUTOSCALING_TASK_MIN_COUNT,
                maximumTaskCount: this.mrAutoscalingConfig.MR_AUTOSCALING_TASK_MAX_COUNT,
                scaleAlarm: regionQueueScalingAlarm,
                scaleOutIncrement: this.mrAutoscalingConfig.MR_AUTOSCALING_TASK_OUT_INCREMENT,
                scaleInIncrement: this.mrAutoscalingConfig.MR_AUTOSCALING_TASK_IN_INCREMENT,
                scaleOutCooldown: aws_cdk_lib_1.Duration.minutes(this.mrAutoscalingConfig.MR_AUTOSCALING_TASK_OUT_COOLDOWN),
                scaleInCooldown: aws_cdk_lib_1.Duration.minutes(this.mrAutoscalingConfig.MR_AUTOSCALING_TASK_IN_COOLDOWN)
            });
        }
        else {
            /**
             * This is currently used when not deploying into ADC
             * partitions. We can swap fully to this when the autoscaling
             *  capability is enabled for ECS.
             */
            const mrServiceScaling = props.service.autoScaleTaskCount({
                maxCapacity: this.mrAutoscalingConfig.MR_AUTOSCALING_TASK_MAX_COUNT,
                minCapacity: this.mrAutoscalingConfig.MR_AUTOSCALING_TASK_MIN_COUNT
            });
            mrServiceScaling.scaleOnMetric("MRRegionQueueScaling", {
                metric: props.regionRequestQueue.metricApproximateNumberOfMessagesVisible(),
                scalingSteps: [
                    { change: +3, lower: 1 },
                    { change: +5, lower: 5 },
                    { change: +8, lower: 20 },
                    { change: +15, lower: 100 }
                ]
            });
            mrServiceScaling.scaleOnMetric("MRImageQueueScaling", {
                metric: props.imageRequestQueue.metricNumberOfMessagesReceived({
                    period: aws_cdk_lib_1.Duration.minutes(5),
                    statistic: "sum"
                }),
                scalingSteps: [
                    { change: -1, upper: 0 },
                    { change: +1, lower: 1 }
                ],
                cooldown: aws_cdk_lib_1.Duration.minutes(1),
                evaluationPeriods: 3
            });
        }
    }
}
exports.MRAutoScaling = MRAutoScaling;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXJfYXV0b3NjYWxpbmcuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJtcl9hdXRvc2NhbGluZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7O0dBRUc7OztBQUVILG9FQUFzRTtBQUN0RSw2Q0FBdUM7QUFDdkMsK0RBQW1EO0FBSW5ELHFDQUEwQztBQUMxQywyQ0FBdUM7QUFLdkMsbURBQW1EO0FBQ25ELGlIQUFpSDtBQUNqSCxNQUFhLG1CQUFtQjtJQUM5QixZQUNTLGdDQUFnQyxFQUFFLEVBQ2xDLGdDQUFnQyxDQUFDLEVBQ2pDLG1DQUFtQyxDQUFDLEVBQ3BDLGtDQUFrQyxDQUFDLEVBQ25DLG1DQUFtQyxDQUFDLEVBQ3BDLG9DQUFvQyxDQUFDO1FBTHJDLGtDQUE2QixHQUE3Qiw2QkFBNkIsQ0FBSztRQUNsQyxrQ0FBNkIsR0FBN0IsNkJBQTZCLENBQUk7UUFDakMscUNBQWdDLEdBQWhDLGdDQUFnQyxDQUFJO1FBQ3BDLG9DQUErQixHQUEvQiwrQkFBK0IsQ0FBSTtRQUNuQyxxQ0FBZ0MsR0FBaEMsZ0NBQWdDLENBQUk7UUFDcEMsc0NBQWlDLEdBQWpDLGlDQUFpQyxDQUFJO0lBQzNDLENBQUM7Q0FDTDtBQVRELGtEQVNDO0FBcUJELE1BQWEsYUFBYyxTQUFRLHNCQUFTO0lBSTFDOzs7Ozs7T0FNRztJQUNILFlBQVksS0FBZ0IsRUFBRSxFQUFVLEVBQUUsS0FBeUI7UUFDakUsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztRQUVqQixtRUFBbUU7UUFDbkUsSUFBSSxLQUFLLENBQUMsbUJBQW1CLEVBQUU7WUFDN0IsSUFBSSxDQUFDLG1CQUFtQixHQUFHLEtBQUssQ0FBQyxtQkFBbUIsQ0FBQztTQUN0RDthQUFNO1lBQ0wsd0JBQXdCO1lBQ3hCLElBQUksQ0FBQyxtQkFBbUIsR0FBRyxJQUFJLG1CQUFtQixFQUFFLENBQUM7U0FDdEQ7UUFFRCxxRUFBcUU7UUFDckUsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLEtB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QixDQUFDLENBQUM7U0FDSjtJQUNILENBQUM7Q0FDRjtBQWxIRCxzQ0FrSEMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IDIwMjMgQW1hem9uLmNvbSwgSW5jLiBvciBpdHMgYWZmaWxpYXRlcy5cbiAqL1xuXG5pbXBvcnQgeyBFY3NJc29TZXJ2aWNlQXV0b3NjYWxlciB9IGZyb20gXCJAY2RrbGFicy9jZGstZW50ZXJwcmlzZS1pYWNcIjtcbmltcG9ydCB7IER1cmF0aW9uIH0gZnJvbSBcImF3cy1jZGstbGliXCI7XG5pbXBvcnQgeyBBbGFybSB9IGZyb20gXCJhd3MtY2RrLWxpYi9hd3MtY2xvdWR3YXRjaFwiO1xuaW1wb3J0IHsgQ2x1c3RlciwgRmFyZ2F0ZVNlcnZpY2UgfSBmcm9tIFwiYXdzLWNkay1saWIvYXdzLWVjc1wiO1xuaW1wb3J0IHsgSVJvbGUgfSBmcm9tIFwiYXdzLWNkay1saWIvYXdzLWlhbVwiO1xuaW1wb3J0IHsgUXVldWUgfSBmcm9tIFwiYXdzLWNkay1saWIvYXdzLXNxc1wiO1xuaW1wb3J0IHsgTmFnU3VwcHJlc3Npb25zIH0gZnJvbSBcImNkay1uYWdcIjtcbmltcG9ydCB7IENvbnN0cnVjdCB9IGZyb20gXCJjb25zdHJ1Y3RzXCI7XG5cbmltcG9ydCB7IE9TTUxBY2NvdW50IH0gZnJvbSBcIi4uL29zbWwvb3NtbF9hY2NvdW50XCI7XG5pbXBvcnQgeyBNUkRhdGFwbGFuZUNvbmZpZyB9IGZyb20gXCIuL21yX2RhdGFwbGFuZVwiO1xuXG4vLyBtdXRhYmxlIGNvbmZpZ3VyYXRpb24gZGF0YWNsYXNzIGZvciBtb2RlbCBydW5uZXJcbi8vIGZvciBhIG1vcmUgZGV0YWlsZWQgYnJlYWtkb3duIG9mIHRoZSBjb25maWd1cmF0aW9uIHNlZTogY29uZmlndXJhdGlvbl9ndWlkZS5tZCBpbiB0aGUgZG9jdW1lbnRhdGlvbiBkaXJlY3RvcnkuXG5leHBvcnQgY2xhc3MgTVJBdXRvc2NhbGluZ0NvbmZpZyB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHB1YmxpYyBNUl9BVVRPU0NBTElOR19UQVNLX01BWF9DT1VOVCA9IDQwLFxuICAgIHB1YmxpYyBNUl9BVVRPU0NBTElOR19UQVNLX01JTl9DT1VOVCA9IDUsXG4gICAgcHVibGljIE1SX0FVVE9TQ0FMSU5HX1RBU0tfT1VUX0NPT0xET1dOID0gMyxcbiAgICBwdWJsaWMgTVJfQVVUT1NDQUxJTkdfVEFTS19JTl9DT09MRE9XTiA9IDEsXG4gICAgcHVibGljIE1SX0FVVE9TQ0FMSU5HX1RBU0tfSU5fSU5DUkVNRU5UID0gOCxcbiAgICBwdWJsaWMgTVJfQVVUT1NDQUxJTkdfVEFTS19PVVRfSU5DUkVNRU5UID0gOFxuICApIHt9XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgTVJBdXRvU2NhbGluZ1Byb3BzIHtcbiAgLy8gdGhlIG9zbWwgYWNjb3VudCBpbnRlcmZhY2VcbiAgYWNjb3VudDogT1NNTEFjY291bnQ7XG4gIC8vIHRoZSBpYW0gcm9sZSB0byB1c2UgZm9yIGF1dG9zY2FsaW5nIGNvbXBvbmVudHNcbiAgcm9sZTogSVJvbGU7XG4gIC8vIHRoZSBtb2RlbCBydW5uZXIgZWNzIGNsdXN0ZXJcbiAgY2x1c3RlcjogQ2x1c3RlcjtcbiAgLy8gdGhlIG1vZGVsIHJ1bm5lciBmYXJnYXRlIHNlcnZpY2VcbiAgc2VydmljZTogRmFyZ2F0ZVNlcnZpY2U7XG4gIC8vIHRoZSBtb2RlbCBydW5uZXIgaW1hZ2UgcmVxdWVzdCBxdWV1ZVxuICBpbWFnZVJlcXVlc3RRdWV1ZTogUXVldWU7XG4gIC8vIHRoZSBtb2RlbCBydW5uZXIgcmVnaW9uIHJlcXVlc3QgcXVldWVcbiAgcmVnaW9uUmVxdWVzdFF1ZXVlOiBRdWV1ZTtcbiAgLy8gdGhlIG1vZGVsIHJ1bm5lciBzZXJ2aWNlIGNvbmZpZ3VyYXRpb25cbiAgbXJEYXRhcGxhbmVDb25maWc6IE1SRGF0YXBsYW5lQ29uZmlnO1xuICAvLyB0aGUgb3B0aW9uYWwgYXV0b3NjYWxpbmcgY3VzdG9tIGNvbmZpZ3VyYXRpb25cbiAgbXJBdXRvc2NhbGluZ0NvbmZpZz86IE1SQXV0b3NjYWxpbmdDb25maWc7XG59XG5cbmV4cG9ydCBjbGFzcyBNUkF1dG9TY2FsaW5nIGV4dGVuZHMgQ29uc3RydWN0IHtcbiAgcmVhZG9ubHkgc2VydmljZUF1dG9zY2FsZXI6IEVjc0lzb1NlcnZpY2VBdXRvc2NhbGVyO1xuICBtckF1dG9zY2FsaW5nQ29uZmlnOiBNUkF1dG9zY2FsaW5nQ29uZmlnO1xuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgY3VzdG9tIGF1dG9zY2FsaW5nIGltcGxlbWVudGF0aW9uIGZvciBtb2RlbCBydW5uZXIuXG4gICAqIEBwYXJhbSBzY29wZSB0aGUgc2NvcGUvc3RhY2sgaW4gd2hpY2ggdG8gZGVmaW5lIHRoaXMgY29uc3RydWN0LlxuICAgKiBAcGFyYW0gaWQgdGhlIGlkIG9mIHRoaXMgY29uc3RydWN0IHdpdGhpbiB0aGUgY3VycmVudCBzY29wZS5cbiAgICogQHBhcmFtIHByb3BzIHRoZSBwcm9wZXJ0aWVzIG9mIHRoaXMgY29uc3RydWN0LlxuICAgKiBAcmV0dXJucyB0aGUgTVJBdXRvU2NhbGluZyBjb25zdHJ1Y3QuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihzY29wZTogQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wczogTVJBdXRvU2NhbGluZ1Byb3BzKSB7XG4gICAgc3VwZXIoc2NvcGUsIGlkKTtcblxuICAgIC8vIGNoZWNrIGFuZCBzZWUgaWYgYSBjdXN0b20gYXV0b3NjYWxpbmcgY29uZmlndXJhdGlvbiB3YXMgcHJvdmlkZWRcbiAgICBpZiAocHJvcHMubXJBdXRvc2NhbGluZ0NvbmZpZykge1xuICAgICAgdGhpcy5tckF1dG9zY2FsaW5nQ29uZmlnID0gcHJvcHMubXJBdXRvc2NhbGluZ0NvbmZpZztcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gaWYgbm90IHNldCB0byBkZWZhdWx0XG4gICAgICB0aGlzLm1yQXV0b3NjYWxpbmdDb25maWcgPSBuZXcgTVJBdXRvc2NhbGluZ0NvbmZpZygpO1xuICAgIH1cblxuICAgIC8vIENyZWF0ZSBjdXN0b20gYXV0b3NjYWxpbmcgZm9yIEFEQyByZWdpb25zIHdoZXJlIGl0IGlzbid0IGF2YWlsYWJsZVxuICAgIGlmIChwcm9wcy5hY2NvdW50LmlzQWRjKSB7XG4gICAgICAvKipcbiAgICAgICAqIENsb3VkV2F0Y2ggU2NoZWR1bGVkIEpvYiB0byBjb250cm9sIHNjYWxpbmdcbiAgICAgICAqIFRoaXMgaXMgY3VycmVudGx5IHVzZWQgdG8gcHJvdmlkZSBzY2FsaW5nIGNhcGFiaWxpdHkgZm9yIEVDU1xuICAgICAgICogdGFza3MgaW4gdGhlIGhpZ2hzaWRlIHBhcnRpdGlvbnMuXG4gICAgICAgKi9cblxuICAgICAgY29uc3QgcmVnaW9uUXVldWVTY2FsaW5nQWxhcm0gPSBuZXcgQWxhcm0oXG4gICAgICAgIHRoaXMsXG4gICAgICAgIFwiUmVnaW9uUXVldWVTY2FsaW5nQWxhcm1cIixcbiAgICAgICAge1xuICAgICAgICAgIG1ldHJpYzpcbiAgICAgICAgICAgIHByb3BzLnJlZ2lvblJlcXVlc3RRdWV1ZS5tZXRyaWNBcHByb3hpbWF0ZU51bWJlck9mTWVzc2FnZXNWaXNpYmxlKCksXG4gICAgICAgICAgZXZhbHVhdGlvblBlcmlvZHM6IDEsXG4gICAgICAgICAgdGhyZXNob2xkOiAzXG4gICAgICAgIH1cbiAgICAgICk7XG5cbiAgICAgIE5hZ1N1cHByZXNzaW9ucy5hZGRSZXNvdXJjZVN1cHByZXNzaW9ucyhcbiAgICAgICAgdGhpcyxcbiAgICAgICAgW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIGlkOiBcIk5JU1QuODAwLjUzLlI1LUNsb3VkV2F0Y2hBbGFybUFjdGlvblwiLFxuICAgICAgICAgICAgcmVhc29uOlxuICAgICAgICAgICAgICBcIkxhbWJkYSBmdW5jdGlvbiBtb25pdG9ycyB0aGVzZSBhbGFybXMgb24gYSBjcm9uIGJhc2lzIFwiICtcbiAgICAgICAgICAgICAgXCJyYXRoZXIgdGhhbiBhbiBldmVudCB0cmlnZ2VyIHRvIGhlbHAgc2NhbGluZyBzbW9vdGhuZXNzLlwiXG4gICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICB0cnVlXG4gICAgICApO1xuXG4gICAgICB0aGlzLnNlcnZpY2VBdXRvc2NhbGVyID0gbmV3IEVjc0lzb1NlcnZpY2VBdXRvc2NhbGVyKFxuICAgICAgICB0aGlzLFxuICAgICAgICBcIk1SU2VydmljZVNjYWxlclwiLFxuICAgICAgICB7XG4gICAgICAgICAgcm9sZTogcHJvcHMucm9sZSxcbiAgICAgICAgICBlY3NDbHVzdGVyOiBwcm9wcy5jbHVzdGVyLFxuICAgICAgICAgIGVjc1NlcnZpY2U6IHByb3BzLnNlcnZpY2UsXG4gICAgICAgICAgbWluaW11bVRhc2tDb3VudDpcbiAgICAgICAgICAgIHRoaXMubXJBdXRvc2NhbGluZ0NvbmZpZy5NUl9BVVRPU0NBTElOR19UQVNLX01JTl9DT1VOVCxcbiAgICAgICAgICBtYXhpbXVtVGFza0NvdW50OlxuICAgICAgICAgICAgdGhpcy5tckF1dG9zY2FsaW5nQ29uZmlnLk1SX0FVVE9TQ0FMSU5HX1RBU0tfTUFYX0NPVU5ULFxuICAgICAgICAgIHNjYWxlQWxhcm06IHJlZ2lvblF1ZXVlU2NhbGluZ0FsYXJtLFxuICAgICAgICAgIHNjYWxlT3V0SW5jcmVtZW50OlxuICAgICAgICAgICAgdGhpcy5tckF1dG9zY2FsaW5nQ29uZmlnLk1SX0FVVE9TQ0FMSU5HX1RBU0tfT1VUX0lOQ1JFTUVOVCxcbiAgICAgICAgICBzY2FsZUluSW5jcmVtZW50OlxuICAgICAgICAgICAgdGhpcy5tckF1dG9zY2FsaW5nQ29uZmlnLk1SX0FVVE9TQ0FMSU5HX1RBU0tfSU5fSU5DUkVNRU5ULFxuICAgICAgICAgIHNjYWxlT3V0Q29vbGRvd246IER1cmF0aW9uLm1pbnV0ZXMoXG4gICAgICAgICAgICB0aGlzLm1yQXV0b3NjYWxpbmdDb25maWcuTVJfQVVUT1NDQUxJTkdfVEFTS19PVVRfQ09PTERPV05cbiAgICAgICAgICApLFxuICAgICAgICAgIHNjYWxlSW5Db29sZG93bjogRHVyYXRpb24ubWludXRlcyhcbiAgICAgICAgICAgIHRoaXMubXJBdXRvc2NhbGluZ0NvbmZpZy5NUl9BVVRPU0NBTElOR19UQVNLX0lOX0NPT0xET1dOXG4gICAgICAgICAgKVxuICAgICAgICB9XG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICAvKipcbiAgICAgICAqIFRoaXMgaXMgY3VycmVudGx5IHVzZWQgd2hlbiBub3QgZGVwbG95aW5nIGludG8gQURDXG4gICAgICAgKiBwYXJ0aXRpb25zLiBXZSBjYW4gc3dhcCBmdWxseSB0byB0aGlzIHdoZW4gdGhlIGF1dG9zY2FsaW5nXG4gICAgICAgKiAgY2FwYWJpbGl0eSBpcyBlbmFibGVkIGZvciBFQ1MuXG4gICAgICAgKi9cbiAgICAgIGNvbnN0IG1yU2VydmljZVNjYWxpbmcgPSBwcm9wcy5zZXJ2aWNlLmF1dG9TY2FsZVRhc2tDb3VudCh7XG4gICAgICAgIG1heENhcGFjaXR5OiB0aGlzLm1yQXV0b3NjYWxpbmdDb25maWcuTVJfQVVUT1NDQUxJTkdfVEFTS19NQVhfQ09VTlQsXG4gICAgICAgIG1pbkNhcGFjaXR5OiB0aGlzLm1yQXV0b3NjYWxpbmdDb25maWcuTVJfQVVUT1NDQUxJTkdfVEFTS19NSU5fQ09VTlRcbiAgICAgIH0pO1xuXG4gICAgICBtclNlcnZpY2VTY2FsaW5nLnNjYWxlT25NZXRyaWMoXCJNUlJlZ2lvblF1ZXVlU2NhbGluZ1wiLCB7XG4gICAgICAgIG1ldHJpYzpcbiAgICAgICAgICBwcm9wcy5yZWdpb25SZXF1ZXN0UXVldWUubWV0cmljQXBwcm94aW1hdGVOdW1iZXJPZk1lc3NhZ2VzVmlzaWJsZSgpLFxuICAgICAgICBzY2FsaW5nU3RlcHM6IFtcbiAgICAgICAgICB7IGNoYW5nZTogKzMsIGxvd2VyOiAxIH0sXG4gICAgICAgICAgeyBjaGFuZ2U6ICs1LCBsb3dlcjogNSB9LFxuICAgICAgICAgIHsgY2hhbmdlOiArOCwgbG93ZXI6IDIwIH0sXG4gICAgICAgICAgeyBjaGFuZ2U6ICsxNSwgbG93ZXI6IDEwMCB9XG4gICAgICAgIF1cbiAgICAgIH0pO1xuXG4gICAgICBtclNlcnZpY2VTY2FsaW5nLnNjYWxlT25NZXRyaWMoXCJNUkltYWdlUXVldWVTY2FsaW5nXCIsIHtcbiAgICAgICAgbWV0cmljOiBwcm9wcy5pbWFnZVJlcXVlc3RRdWV1ZS5tZXRyaWNOdW1iZXJPZk1lc3NhZ2VzUmVjZWl2ZWQoe1xuICAgICAgICAgIHBlcmlvZDogRHVyYXRpb24ubWludXRlcyg1KSxcbiAgICAgICAgICBzdGF0aXN0aWM6IFwic3VtXCJcbiAgICAgICAgfSksXG4gICAgICAgIHNjYWxpbmdTdGVwczogW1xuICAgICAgICAgIHsgY2hhbmdlOiAtMSwgdXBwZXI6IDAgfSxcbiAgICAgICAgICB7IGNoYW5nZTogKzEsIGxvd2VyOiAxIH1cbiAgICAgICAgXSxcbiAgICAgICAgY29vbGRvd246IER1cmF0aW9uLm1pbnV0ZXMoMSksXG4gICAgICAgIGV2YWx1YXRpb25QZXJpb2RzOiAzXG4gICAgICB9KTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==