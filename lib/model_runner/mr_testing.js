"use strict";
/*
 * Copyright 2023 Amazon.com, Inc. or its affiliates.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.MRTesting = exports.MRTestingConfig = void 0;
const aws_cdk_lib_1 = require("aws-cdk-lib");
const aws_kinesis_1 = require("aws-cdk-lib/aws-kinesis");
const aws_s3_1 = require("aws-cdk-lib/aws-s3");
const aws_s3_deployment_1 = require("aws-cdk-lib/aws-s3-deployment");
const aws_sns_subscriptions_1 = require("aws-cdk-lib/aws-sns-subscriptions");
const constructs_1 = require("constructs");
const osml_bucket_1 = require("../osml/osml_bucket");
const osml_container_1 = require("../osml/osml_container");
const osml_queue_1 = require("../osml/osml_queue");
const osml_repository_1 = require("../osml/osml_repository");
const osml_sm_endpoint_1 = require("../osml/osml_sm_endpoint");
const mr_sm_role_1 = require("./mr_sm_role");
// mutable configuration dataclass for the model runner testing Construct
// for a more detailed breakdown of the configuration see: configuration_guide.md in the documentation directory.
class MRTestingConfig {
    constructor(
    // queue names
    SQS_IMAGE_STATUS_QUEUE = "ImageStatusQueue", SQS_REGION_STATUS_QUEUE = "RegionStatusQueue", 
    // sagemaker names
    SM_CENTER_POINT_MODEL = "centerpoint", SM_FLOOD_MODEL = "flood", SM_AIRCRAFT_MODEL = "aircraft", SM_ROLE_NAME = "OSMLSageMakerRole", SM_INITIAL_INSTANCE_COUNT = 1, SM_INITIAL_VARIANT_WEIGHT = 1, SM_VARIANT_NAME = "AllTraffic", SM_CPU_INSTANCE_TYPE = "ml.m5.xlarge", SM_GPU_INSTANCE_TYPE = "ml.p3.2xlarge", 
    // bucket names
    S3_RESULTS_BUCKET = "test-results", S3_IMAGE_BUCKET = "test-images", 
    // path to test images
    S3_TEST_IMAGES_PATH = "assets/images", 
    // ecr repo names
    ECR_CENTERPOINT_MODEL_REPOSITORY = "centerpoint-model-container", ECR_FLOOD_MODEL_REPOSITORY = "flood-model-container", ECR_AIRCRAFT_MODEL_REPOSITORY = "aircraft-model-container", 
    // path to the control model source
    ECR_MODELS_PATH = "lib/models", 
    // build target for control model container
    ECR_MODEL_TARGET = "osml_model") {
        this.SQS_IMAGE_STATUS_QUEUE = SQS_IMAGE_STATUS_QUEUE;
        this.SQS_REGION_STATUS_QUEUE = SQS_REGION_STATUS_QUEUE;
        this.SM_CENTER_POINT_MODEL = SM_CENTER_POINT_MODEL;
        this.SM_FLOOD_MODEL = SM_FLOOD_MODEL;
        this.SM_AIRCRAFT_MODEL = SM_AIRCRAFT_MODEL;
        this.SM_ROLE_NAME = SM_ROLE_NAME;
        this.SM_INITIAL_INSTANCE_COUNT = SM_INITIAL_INSTANCE_COUNT;
        this.SM_INITIAL_VARIANT_WEIGHT = SM_INITIAL_VARIANT_WEIGHT;
        this.SM_VARIANT_NAME = SM_VARIANT_NAME;
        this.SM_CPU_INSTANCE_TYPE = SM_CPU_INSTANCE_TYPE;
        this.SM_GPU_INSTANCE_TYPE = SM_GPU_INSTANCE_TYPE;
        this.S3_RESULTS_BUCKET = S3_RESULTS_BUCKET;
        this.S3_IMAGE_BUCKET = S3_IMAGE_BUCKET;
        this.S3_TEST_IMAGES_PATH = S3_TEST_IMAGES_PATH;
        this.ECR_CENTERPOINT_MODEL_REPOSITORY = ECR_CENTERPOINT_MODEL_REPOSITORY;
        this.ECR_FLOOD_MODEL_REPOSITORY = ECR_FLOOD_MODEL_REPOSITORY;
        this.ECR_AIRCRAFT_MODEL_REPOSITORY = ECR_AIRCRAFT_MODEL_REPOSITORY;
        this.ECR_MODELS_PATH = ECR_MODELS_PATH;
        this.ECR_MODEL_TARGET = ECR_MODEL_TARGET;
    }
}
exports.MRTestingConfig = MRTestingConfig;
class MRTesting extends constructs_1.Construct {
    /**
     * Creates an MRTesting construct.
     * @param scope the scope/stack in which to define this construct.
     * @param id the id of this construct within the current scope.
     * @param props the properties of this construct.
     * @returns the MRTesting construct.
     */
    constructor(scope, id, props) {
        super(scope, id);
        // check if a custom config was provided
        if (props.mrTestingConfig != undefined) {
            // import existing pass in MR configuration
            this.mrTestingConfig = props.mrTestingConfig;
        }
        else {
            // create a new default configuration
            this.mrTestingConfig = new MRTestingConfig();
        }
        // setup a removal policy
        this.removalPolicy = props.account.prodLike
            ? aws_cdk_lib_1.RemovalPolicy.RETAIN
            : aws_cdk_lib_1.RemovalPolicy.DESTROY;
        // bucket to store images in
        this.imageBucket = new osml_bucket_1.OSMLBucket(this, `OSMLTestImageBucket`, {
            bucketName: `${this.mrTestingConfig.S3_IMAGE_BUCKET}-${props.account.id}`,
            prodLike: props.account.prodLike,
            removalPolicy: this.removalPolicy
        });
        // deploy test images into bucket
        new aws_s3_deployment_1.BucketDeployment(this, "OSMLTestImageDeployment", {
            sources: [aws_s3_deployment_1.Source.asset(this.mrTestingConfig.S3_TEST_IMAGES_PATH)],
            destinationBucket: this.imageBucket.bucket,
            accessControl: aws_s3_1.BucketAccessControl.BUCKET_OWNER_FULL_CONTROL,
            memoryLimit: 10240,
            useEfs: true,
            vpc: props.vpc
        });
        // bucket to store rest results in
        this.resultsBucket = new osml_bucket_1.OSMLBucket(this, `OSMLTestResultsBucket`, {
            bucketName: `${this.mrTestingConfig.S3_RESULTS_BUCKET}-${props.account.id}`,
            prodLike: props.account.prodLike,
            removalPolicy: this.removalPolicy
        });
        // a simple provisioned stream for testing the kinesis sink
        this.resultStream = new aws_kinesis_1.Stream(this, "TestStream", {
            streamName: `test-stream-${props.account.id}`,
            streamMode: aws_kinesis_1.StreamMode.PROVISIONED,
            shardCount: 1
        });
        // check if a role was provided
        if (props.smRole != undefined) {
            // import passed in MR task role
            this.smRole = props.smRole;
        }
        else {
            // create a new role
            this.smRole = new mr_sm_role_1.MRSMRole(this, "MRSMRole", {
                account: props.account,
                roleName: this.mrTestingConfig.SM_ROLE_NAME
            }).role;
        }
        if (props.deployCenterpointModel !== false) {
            if (props.centerpointModelUri !== undefined) {
                // import the image asset passed in
                this.centerPointModelImageAsset = props.centerpointModelUri;
            }
            else {
                // build a new repository for the centerpoint model
                this.centerPointModelRepository = new osml_repository_1.OSMLRepository(this, "MRCenterpointModelRepository", {
                    repositoryName: this.mrTestingConfig.ECR_CENTERPOINT_MODEL_REPOSITORY,
                    removalPolicy: this.removalPolicy
                });
                // build and deploy centerpoint model container to target repo
                this.centerPointModelImageAsset = new osml_container_1.OSMLECRContainer(this, "MRCenterPointModelContainer", {
                    directory: this.mrTestingConfig.ECR_MODELS_PATH,
                    target: this.mrTestingConfig.ECR_MODEL_TARGET,
                    repository: this.centerPointModelRepository.repository
                }).imageAsset.imageUri;
            }
            // build an SM endpoint from the centerpoint model container
            this.centerPointModelEndpoint = new osml_sm_endpoint_1.OSMLSMEndpoint(this, "OSMLCenterPointModelEndpoint", {
                modelContainerUri: this.centerPointModelImageAsset,
                modelName: this.mrTestingConfig.SM_CENTER_POINT_MODEL,
                roleArn: this.smRole.roleArn,
                instanceType: this.mrTestingConfig.SM_CPU_INSTANCE_TYPE,
                initialInstanceCount: this.mrTestingConfig.SM_INITIAL_INSTANCE_COUNT,
                initialVariantWeight: this.mrTestingConfig.SM_INITIAL_VARIANT_WEIGHT,
                variantName: this.mrTestingConfig.SM_VARIANT_NAME
            });
        }
        if (props.deployFloodModel != false) {
            if (props.floodModelUri != undefined) {
                // import the image asset passed in
                this.floodModelImageAsset = props.floodModelUri;
            }
            else {
                // build a new repository for the flood model
                this.floodModelRepository = new osml_repository_1.OSMLRepository(this, "MRFloodModelRepository", {
                    repositoryName: this.mrTestingConfig.ECR_FLOOD_MODEL_REPOSITORY,
                    removalPolicy: this.removalPolicy
                });
                // build and deploy flood model container to target repo
                this.floodModelImageAsset = new osml_container_1.OSMLECRContainer(this, "MRFloodModelContainer", {
                    directory: this.mrTestingConfig.ECR_MODELS_PATH,
                    target: this.mrTestingConfig.ECR_MODEL_TARGET,
                    repository: this.floodModelRepository.repository,
                    buildArgs: { MODEL_SELECTION: "flood" }
                }).imageAsset.imageUri;
            }
            // build an SM endpoint from the flood model container
            this.floodModelEndpoint = new osml_sm_endpoint_1.OSMLSMEndpoint(this, "OSMLFloodModelEndpoint", {
                modelContainerUri: this.floodModelImageAsset,
                modelName: this.mrTestingConfig.SM_FLOOD_MODEL,
                roleArn: this.smRole.roleArn,
                instanceType: this.mrTestingConfig.SM_CPU_INSTANCE_TYPE,
                initialInstanceCount: this.mrTestingConfig.SM_INITIAL_INSTANCE_COUNT,
                initialVariantWeight: this.mrTestingConfig.SM_INITIAL_VARIANT_WEIGHT,
                variantName: this.mrTestingConfig.SM_VARIANT_NAME
            });
        }
        if (props.deployAircraftModel != false) {
            if (props.aircraftModelUri != undefined) {
                // import the image asset passed in
                this.aircraftModelImageAsset = props.aircraftModelUri;
            }
            else {
                // build a new repository for the aircraft model
                this.aircraftModelRepository = new osml_repository_1.OSMLRepository(this, "MRAircraftModelRepository", {
                    repositoryName: this.mrTestingConfig.ECR_AIRCRAFT_MODEL_REPOSITORY,
                    removalPolicy: this.removalPolicy
                });
                // build and deploy aicraft model container to target repo
                this.aircraftModelImageAsset = new osml_container_1.OSMLECRContainer(this, "MRAircraftModelContainer", {
                    directory: this.mrTestingConfig.ECR_MODELS_PATH,
                    target: this.mrTestingConfig.ECR_MODEL_TARGET,
                    repository: this.aircraftModelRepository.repository,
                    buildArgs: { MODEL_SELECTION: "aircraft" }
                }).imageAsset.imageUri;
            }
            // build an SM endpoint from the aircraft model container
            this.aircraftModelEndpoint = new osml_sm_endpoint_1.OSMLSMEndpoint(this, "OSMLAircraftModelEndpoint", {
                modelContainerUri: this.aircraftModelImageAsset,
                modelName: this.mrTestingConfig.SM_AIRCRAFT_MODEL,
                roleArn: this.smRole.roleArn,
                instanceType: this.mrTestingConfig.SM_GPU_INSTANCE_TYPE,
                initialInstanceCount: this.mrTestingConfig.SM_INITIAL_INSTANCE_COUNT,
                initialVariantWeight: this.mrTestingConfig.SM_INITIAL_VARIANT_WEIGHT,
                variantName: this.mrTestingConfig.SM_VARIANT_NAME
            });
        }
        // create an SQS queue for region status processing updates
        this.regionStatusQueue = new osml_queue_1.OSMLQueue(this, "OSMLRegionStatusQueue", {
            queueName: this.mrTestingConfig.SQS_REGION_STATUS_QUEUE
        });
        // subscribe the region status topic to the queue
        props.regionStatusTopic.addSubscription(new aws_sns_subscriptions_1.SqsSubscription(this.regionStatusQueue.queue));
        // create an SQS queue for image processing status updates
        this.imageStatusQueue = new osml_queue_1.OSMLQueue(this, "OSMLImageStatusQueue", {
            queueName: this.mrTestingConfig.SQS_IMAGE_STATUS_QUEUE
        });
        // subscribe the image status topic to the queue
        props.imageStatusTopic.addSubscription(new aws_sns_subscriptions_1.SqsSubscription(this.imageStatusQueue.queue));
    }
}
exports.MRTesting = MRTesting;
//# sourceMappingURL=data:application/json;base64,